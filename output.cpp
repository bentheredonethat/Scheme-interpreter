// Autogenerated Scheme to C++ Code
// File: test.cpp
#include <iostream>
#include "Object.h"
using namespace std;

Object b( ){
	if(Object(1) > Object(2)){
		return Object(1);
	}
 
	else{
		return Object(2);
	}
 
}

Object aa( Object c){
	return c;
}

Object ab( ){
	return Object(1);
}

Object ac( ){
	return Object("1");
}

Object funky( Object p1, Object p2){
	if(p1 && p2){
		return p1;
	}
 
	else{
		return p2;
	}
 
}

int main(){
	cout << Object(5) << endl;
	cout << Object("a") << endl;
	cout << Object("aa") << endl;
	cout << Object("(a b)") << endl;
	cout << Object("(a 1 2 a)") << endl;
	cout << (Object(1) == Object(2)) << endl;
	cout << (car(Object("a"))) << endl;
	cout << (car(Object("(1 2)"))) << endl;
	cout << (car(Object("(1 a)"))) << endl;
	cout << (car(Object("(a b)"))) << endl;
	cout << (cdr(Object("a"))) << endl;
	cout << (cons(Object(1), Object("a"))) << endl;
	cout << (Object(1) && Object(2)) << endl;
	cout << (Object(1) || Object(2)) << endl;
	cout << (!(Object(1))) << endl;
	cout << (!((!(Object(1))))) << endl;
	cout << (numberp(Object(1))) << endl;
	cout << (numberp((numberp(Object(1))))) << endl;
	cout << (symbolp(Object(1))) << endl;
	cout << (symbolp((symbolp(Object(1))))) << endl;
	cout << (listp(Object(1))) << endl;
	cout << (listp((listp(Object(1))))) << endl;
	cout << (zerop(Object(1))) << endl;
	cout << (zerop((zerop(Object(1))))) << endl;
	cout << (nullp(Object(1))) << endl;
	cout << (nullp((nullp(Object(1))))) << endl;
	cout << (charp(Object(1))) << endl;
	cout << (charp((charp(Object(1))))) << endl;
	cout << (stringp(Object(1))) << endl;
	cout << (stringp((stringp(Object(1))))) << endl;
	cout << (Object(1) + Object(2)) << endl;
	cout << (Object(1) - Object(2)) << endl;
	cout << (Object(1) / Object(2)) << endl;
	cout << (Object(1) * Object(2)) << endl;
	cout << (Object(1) == Object(2)) << endl;
	cout << (Object(1) > Object(2)) << endl;
	cout << (Object(1) < Object(2)) << endl;
	cout << (Object(1) >= Object(2)) << endl;
	cout << (Object(1) <= Object(2)) << endl;
	cout << (a(Object(1))) << endl;
	cout << (a(Object(1), Object(2))) << endl;
	
	return 0;
}