// Autogenerated Scheme to C++ Code
// File: test4.cpp
#include <iostream>
#include “Object.h”
using namespace std;


Object a(){
	return a;
}

Object a(){
	if (a){
		return 1;
	}
	else{
		return 2;
	}
}

Object b(){
	if (b){
		return 1;
	}
}

int main(){
	cout << Object(5) << endl;
	cout << Object(a) << endl;
	cout << Object("a") << endl;
	cout << Object("aa") << endl;
	cout << Object("a b") << endl;
	cout << Object("a 1 2 a") << endl;
	cout << car(Object("a")) << endl;
	cout << cdr(Object("a")) << endl;
	cout << cons(Object(a), Object("a")) << endl;
	cout << (&&) << endl;
	cout << (Object(1) && ) << endl;
	cout << (Object(1) && Object(2)) << endl;
	cout << || << endl;
	cout << (Object(1) || ) << endl;
	cout << (Object(1) || Object(2)) << endl;
	cout << (!(Object(1))) << endl;
	cout << (!(!(Object(1)))) << endl;
	cout << (numberp(Object(1))) << endl;
	cout << (numberp(numberp(Object(1)))) << endl;
	cout << (symbolp(Object(1))) << endl;
	cout << (symbolp(symbolp(Object(1)))) << endl;
	cout << (listp(Object(1))) << endl;
	cout << (listp(listp(Object(1)))) << endl;
	cout << (zerop(Object(1))) << endl;
	cout << (zerop(zerop(Object(1)))) << endl;
	cout << (nullp(Object(1))) << endl;
	cout << (nullp(nullp(Object(1)))) << endl;
	cout << (charp(Object(1))) << endl;
	cout << (charp(charp(Object(1)))) << endl;
	cout << (stringp(Object(1))) << endl;
	cout << (stringp(stringp(Object(1)))) << endl;
	cout << ( + ) << endl;
	cout << (Object(1) + ) << endl;
	cout << (Object(1) + Object(2)) << endl;
	cout << (Object(1) - ) << endl;
	cout << (Object(1) - Object(2)) << endl;
	cout << (Object(1) / ) << endl;
	cout << (Object(1) / Object(2)) << endl;
	cout << ( * ) << endl;
	cout << (Object(1) * ) << endl;
	cout << (Object(1) * Object(2)) << endl;
	cout << ( = ) << endl;
	cout << (Object(1) = ) << endl;
	cout << (Object(1) = Object(2)) << endl;
	cout << ( > ) << endl;
	cout << (Object(1) > ) << endl;
	cout << (Object(1) > Object(2)) << endl;
	cout << ( < ) << endl;
	cout << (Object(1) < ) << endl;
	cout << (Object(1) < Object(2)) << endl;
	cout << ( >= ) << endl;
	cout << (Object(1) >= ) << endl;
	cout << (Object(1) >= Object(2)) << endl;
	cout << ( <= ) << endl;
	cout << (Object(1) <= ) << endl;
	cout << (Object(1) <= Object(2)) << endl;
	cout << ( a() ) << endl;
	cout << (a(Object(1))) << endl;
	cout << (a(Object(1), Object(2))) << endl;
	return 0;
}