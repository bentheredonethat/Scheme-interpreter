(car '(abc def ghi))
(cdr '(abc def ghi))
(cons 'abd '(1 2 3))
(cons 'a 'b)
(cons (car '(a b c d)) (cddr '(a b c d)))
(cons (cadr $(a b c d)) (caddr '(a ^ c d)))
(cons (cadr '(a b c d)) (caddr '(a b c d)))
(+ 4 5 2 7 5 2)
(+ 4 5 2 7 5 2)
(+ (* 2 2 2 2 2) (* 5 5))
(cons '1 '2)
(cons '(1 2 3) '(4 5 6)) 
(cdr '(it rains every day))(cdr (cdr '(a b c d e f))) 
(define (pi a b c)  (if (> n 0) (= n 10) (= n 1)))
(define (pi)  (if (> n 0) (= n 10) (= n 1)))
(= n 10)
( and (= n 14) (+ 1 n) )
(if (< n 20) (or (- n 19) (+ n 1)))
(if (not (number? n)) '() (+ n 1))
(if (not (symbol? pi)) '() (+ n 1))
(list? a)
(zero? n)
(null? a)
(char? a)
(string? a)
(/ n 2)
(<= n n)
(>= n n)
(a a)
